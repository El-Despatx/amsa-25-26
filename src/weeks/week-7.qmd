---
subtitle: "Week 7: Users, permissions and quotas"
format: revealjs
---

# Goals for today

-   Any questions from the previous session?
-   Understand Linux users and groups.
-   What happens when we use sudo?
-   Work with file permissions.
-   Understand Linux disk quotas.

------------------------------------------------------------------------

# Users and groups

## Linux users {.smaller}

-   Each process runs **as a user** (identified by UID).
-   Files and dirs belong to an **owner** and a **group**.
-   The system keeps users in **`/etc/passwd`** and passwords (hashes) in **`/etc/shadow`**.
-   Most day-to-day work should be done as a **regular user**.

::: {.callout-note .fragment}
## Why multiple users?

-   Isolation and security

-   Accountability (who did what)

-   Least-privilege principle
:::

::: {.callout-tip .fragment}
-   In the AMSA VM, you log in as user **`amsa`**.
:::

------------------------------------------------------------------------

## The superuser: `root`

-   **`root`** (UID 0) can read/write anything and change system config.
-   We usually avoid logging in directly as `root`.
-   Instead, we use **`sudo`** to run **one command** with elevated privileges.

::: {.callout-important .fragment}
`sudo <cmd>` runs `<cmd>` as **root**.
:::

------------------------------------------------------------------------

## What `sudo` actually does

Are this commands familiar? This a situation among many where we need admin rights, and so we run the command with `sudo` at the beginning.

``` bash
sudo apt update
sudo apt install -y htop
```

::: {.callout-caution .fragment} 
If you run tools that **create files** (e.g., `ssh-keygen`) with `sudo`, those files will belong to **root** and land in **root’s home**. 
:::

------------------------------------------------------------------------

## Linux groups

-   A **group** (identified by GID) is a set of users sharing permissions on files/dirs.

-   Each user has a **primary group** and may also belong to **other groups**.

-   Useful commands:

    -   `groups [user]` – list which groups is `user` part of
    -   `id [user]` – the same but also shows UID and GIDs

------------------------------------------------------------------------

## System databases

::: {.fragment}
#### `/etc/passwd` (users)

``` bash
cat /etc/passwd
# username:x:UID:GID:comment:home:shell
# fnao:x:1002:1003::/home/fnao:/bin/bash
```
:::

<br>

::: {.fragment}
#### `/etc/shadow` (passwords)

``` bash
cat /etc/shadow
# username:password-hash:lastchange:min:max:warn:inactive:expire:reserved
```
:::

<br>

::: {.fragment}
#### `/etc/group` (groups)

``` bash
cat /etc/group
# name:x:GID:user1,user2,...
```
:::

<br>

------------------------------------------------------------------------

## Creating users

``` bash
# Create user 'test' with a home dir
sudo useradd -m test

# Set a password
sudo passwd test

# Add to 'sudo' group (if desired)
sudo usermod -aG sudo
```

::: {.callout-tip .fragment}
`-m` creates **home dir** at `/home/<user>`.
:::

::: {.callout-note .fragment}
Which groups will a new user have?
:::

------------------------------------------------------------------------

## Home directories {.smaller}

-   Each user can have a home dir, which by default is located at `/home/<username>`.

-   Root user's home dir is not located on `/home/root` but on `/root`
 
::: {.fragment}
``` bash
amsa@amsa: sudo ssh-keygen
Generating public/private ed25519 key pair.
Enter file in which to save the key (/root/.ssh/id_ed25519):
```
:::

::: {.callout-important .fragment}
It is important to understand when to run commands with root and when not to, **do not** prepend `sudo` unless you truly want it for **root**. As a rule of thumb, **avoid using root if you can**.
:::

::: {.callout-tip .fragment}
Running the command `cd` without specifying which directory do we want to go to **will take us to our home dir**.
:::


## Switching users

To switch to another user, we do not need to log out and log back in as the other user. Instead, it is possible to switch user temporarily from the terminal.

``` bash
# Switch to test user (will ask for `test` user password)
su test

# Using sudo (will ask for our user password)
sudo su labuser
```

::: {.callout-note .fragment}
Why does the first command ask for `test` user password and the second one ask for our password?
:::

------------------------------------------------------------------------

# File permissions

## File permissions model

``` bash
ls -l /etc/hosts
# -rw-r--r-- 1 root   root  ... /etc/hosts
#  ^  ^  ^     ^      ^
#  u  g  o     owner  group
```

-   **u/g/o** → user / group / others
-   **r/w/x** → read / write / execute

------------------------------------------------------------------------

## Changing permissions and ownership

To modify permissions we are going to use `chmod` command.

``` bash
chmod u+x script.sh 
# User can execute

chmod g-w,o-r private.txt 
# Group can't write, others can't read

chmod -R o-r /home/amsa
# Other can't read on any file/folder under and including `/home/amsa`
```

For permissions, `chown` command is used.

``` bash
sudo chown amsa:amsa myfile.txt
# Now both owner and group are `amsa`

sudo chown -R test:amsa /home/test
# Now owner is test and group is amsa for any file here
```

------------------------------------------------------------------------

# Quotas

## What are quotas?

-   **Disk quotas** limit how much **space** and how many **files** a **user or group** can consume.
-   Protects against a user filling a filesystem.
-   **Soft limits** (temporarily exceedable during a **grace period**) vs **hard limits** (absolute).

::: {.callout-note .fragment}
 Quotas are **per-filesystem**. You must enable them **when mounting** the filesystem. 
:::

------------------------------------------------------------------------

## Preparing an ext4 filesystem for quotas {.smaller}

``` bash
# 1) Create a 1 GiB file to hold the ext4 filesystem
sudo mkdir -p /var/lib/amsa
sudo truncate -s 1G /var/lib/amsa/quota_disk

# 2) Make it ext4
sudo mkfs.ext4 -F /var/lib/amsa/quota_disk

# 3) Create mount point
sudo mkdir -p /mnt/quota

# 4) Mount with quotas enabled
sudo mount -o loop,usrquota,grpquota /var/lib/amsa/quota_disk /mnt/quota
```

::: {.callout-important .fragment}
For **persistence**, add an `/etc/fstab` entry: 
```bash   
/var/lib/amsa/quota_disk /mnt/quota ext4 loop,defaults,usrquota,grpquota 0 2
```
:::

------------------------------------------------------------------------

## Initialize and enable quotas {.smaller}

``` bash
# Ensure quota tools are available
sudo apt update && sudo apt install quota

# 1) Scan/create quota files
sudo quotacheck -cug /mnt/quota
#  -c create, -u users, -g groups

# 2) Turn quotas on (users and groups)
sudo quotaon -v /mnt/quota

# 3) Verify current usage/limits
sudo repquota /mnt/quota
```

::: {.callout-note .fragment}
Quota files `aquota.user` and `aquota.group` will be created at the **root of the mounted fyle system** (`/mnt/quota`). 
:::

------------------------------------------------------------------------

## Setting user and group quotas

- We're going to use **`setquota`** command.

- We'll need to specify the **disk usage** limits (we can use **K, M, G and T** for Kilobytes, Megabytes, ...). 

- To limit the max **amount of files** that can be created we'll set the desired **amount**.

::: {.fragment}
``` bash
sudo setquota -u test 50M 60M 2 3 /mnt/quota

sudo setquota -g qproj 80M 100M 0 0 /mnt/quota
```
:::

::: {.callout-tip .fragment}
Check current quotas: `quota -u test -v` (per user), `quota -g amsa -v` (per group). 
:::

------------------------------------------------------------------------

## What happens when limits are exceeded

-   **Soft limit**: temporarily exceedable until the **grace period** expires.
-   **Hard limit**: **immediate** “Disk quota exceeded” on further writes.

::: {.callout-note .fragment}
To turn quotas off `sudo quotaoff /mnt/quota` 
:::

------------------------------------------------------------------------

## Quiz

-   If you run `sudo ssh-keygen`, where do keys go and why?
-   Decode `-rwxr-xr--`.
-   What does the file `/etc/passwd` contain?

------------------------------------------------------------------------

## References {.smaller}

-   Understand the `/etc/passwd` file: <https://www.cyberciti.biz/faq/understanding-etcshadow-file/>
-   Introduction to Users and Groups: <https://tldp.org/LDP/intro-linux/html/sect_03_04.html>
-   Understanding File Permissions: <https://help.ubuntu.com/community/FilePermissions>
-   Disk Quota: <https://wiki.archlinux.org/title/Disk_quota>

## Additional Exercices {#extra}

-   Change a file’s permissions so only the owner can read/write it.
-   Find which user owns the most files in your system.
-   Setup quotas for specific users on a tmpfs filesystem.

## Activity 3.3 {.smaller}

Ready to have some fun? Check out the third part of the [third AMSA activity here!](/activities/act-3.qmd)