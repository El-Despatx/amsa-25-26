# Introduction
This page is intended for people that don't know a lot of python or want to know a little bit more about the tools we'll be using on Prac-2.

## Python 101

If youâ€™re just getting started with Python, a great introduction is [ðŸ”— Harvardâ€™s CS50 lecture](https://www.youtube.com/watch?app=desktop&v=EOLPQdVj5Ac)

## Typed Python
Youâ€™ll often hear that **Python is not a typed language**. Thatâ€™s true in the sense that itâ€™s dynamically typed, but the Python community has recognized the value of type hints. Thatâ€™s why we now have the typing module.

With typing, you can:

  - Make your code more self-documenting.

  - Get IDE/editor assistance (e.g., autocomplete, type checking).

  - Catch bugs earlier.

In our library and Prac-2, we use typing. We recommend you to use it too!

[ðŸ”— Learn more about Python typing here](https://www.youtube.com/watch?v=15WB30NqDT0)

## Project Management Tool

Instead of managing dependencies the old way with pip: `(pip install ...)`, weâ€™ll be using [**uv**](github.com/astral-sh/uv).

**Why uv?:**

  - Faster and more modern than pip.

  - Handles virtual environments automatically.

  - Created and maintained by the same team behind Ruff (our linter).

If you want to learn more, check out: [ðŸ”— Why uv is the future of Python tooling](https://www.youtube.com/watch?v=5rTwOt9Qgik)

## Linter

Python follows community standards defined in PEPs ([Python Enhancement Proposals](https://peps.python.org/pep-0000/)). [PEP 8](peps.python.org/pep-0008/), for example, specifies how code should be styled (indentation, line length, naming conventions, etc.).

Of course, no one wants to memorize every detailâ€”so we use linters. The term comes from an old C tool called Lint (1970s), which checked code for bugs and style issues.

For this course, weâ€™ll use [Ruff](github.com/astral-sh/ruff) as a linter because:

  - Extremely fast.

  - Maintained by the uv team.

  - Enforces PEP standards automatically.

